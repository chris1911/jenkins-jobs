<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.9">
  <actions/>
  <description>This project builds the firmware for karlsruhe.freifunk.net.&#xd;
All available targets are compiled within this project.</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.23">
    <script>node {
    wrap([$class: &apos;TimestamperBuildWrapper&apos;]) {
        dir(&apos;ffka&apos;) {
            stage(&apos;Cleanup&apos;) {
                deleteDir()
            }
            
            stage(&apos;Checkout&apos;) {
                // this does not work: git url: &quot;git://github.com/freifunk-gluon/gluon.git&quot;, branch: &quot;tags/v2016.2&quot;
                // hence we have to use the long variant:
                checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;refs/tags/v2016.2&apos;]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: &apos;https://github.com/freifunk-gluon/gluon&apos;]]])
                dir(&apos;site&apos;) {
                    git url: &quot;git://github.com/ffka/site-ffka&quot;, branch: &quot;master&quot;
                }
            }
            
            stage(&apos;Update sub projects&apos;) {
                sh &quot;make update&quot;
            }
            
            stage(&apos;Build ar71xx-generic&apos;) {
                // todo: read enabled targets from gluon/targets/targets.mk
                sh &quot;make -j \$(nproc) GLUON_TARGET=ar71xx-generic clean&quot;
                sh &quot;make -j \$(nproc) GLUON_TARGET=ar71xx-generic&quot;
            }
            
            stage(&apos;Build ar71xx-nand&apos;) {
                sh &quot;make -j \$(nproc) GLUON_TARGET=ar71xx-nand clean&quot;
                sh &quot;make -j \$(nproc) GLUON_TARGET=ar71xx-nand&quot;
            }
            
            stage(&apos;Wrap artifacts up&apos;) {
                // should be ~180MiB per target, maybe less when all files are in a single archive.
                //archiveArtifacts artifacts: &apos;output&apos;, fingerprint: true, onlyIfSuccessful: true
            }
            
            stage(&apos;Cleanup&apos;) {
                step([$class: &apos;WsCleanup&apos;])
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
</flow-definition>