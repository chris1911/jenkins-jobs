<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.9">
  <actions/>
  <description>This project builds the firmware for karlsruhe.freifunk.net.&#xd;
All available targets are compiled within this project.</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.23">
    <script>node {
    //wrap([$class: &apos;TimestamperBuildWrapper&apos;]) {
        //ws {
            //dir(&apos;ffka&apos;) {
                //stage(&apos;Cleanup&apos;) {
                        deleteDir()
                //}
    
                /*stage(&apos;Checkout&apos;) {
                    checkout([$class: &apos;GitSCM&apos;, userRemoteConfigs: [[url: &apos;https://github.com/freifunk-gluon/gluon&apos;]], branches: [[name: &apos;refs/tags/v2016.2&apos;]]])
                    dir(&apos;site&apos;) {
                        checkout([$class: &apos;GitSCM&apos;, userRemoteConfigs: [[url: &apos;https://github.com/ffka/site-ffka&apos;]], branches: [[name: &apos;refs/tags/v0.2.90-stable.1&apos;]]])
                    }
                }
    
                stage(&apos;Update sub projects&apos;) {
                    sh &quot;make update&quot;
                }
    
                stage(&apos;Build ar71xx-generic&apos;) {
                    // todo: read enabled targets from gluon/targets/targets.mk
                    sh &quot;make -j \$(nproc) GLUON_TARGET=ar71xx-generic clean&quot;
                    sh &quot;make -j \$(nproc) GLUON_TARGET=ar71xx-generic&quot;
                }
    
                stage(&apos;Build ar71xx-nand&apos;) {
                    sh &quot;make -j \$(nproc) GLUON_TARGET=ar71xx-nand clean&quot;
                    sh &quot;make -j \$(nproc) GLUON_TARGET=ar71xx-nand&quot;
                }
    
                stage(&apos;Build brcm2708-bcm2708&apos;) {
                    sh &quot;make -j \$(nproc) GLUON_TARGET=brcm2708-bcm2708 clean&quot;
                    sh &quot;make -j \$(nproc) GLUON_TARGET=brcm2708-bcm2708&quot;
                }
    
                stage(&apos;Build brcm2708-bcm2709&apos;) {
                    sh &quot;make -j \$(nproc) GLUON_TARGET=brcm2708-bcm2709 clean&quot;
                    sh &quot;make -j \$(nproc) GLUON_TARGET=brcm2708-bcm2709&quot;
                }
    
                stage(&apos;Build mpc85xx-generic&apos;) {
                    sh &quot;make -j \$(nproc) GLUON_TARGET=mpc85xx-generic clean&quot;
                    sh &quot;make -j \$(nproc) GLUON_TARGET=mpc85xx-generic&quot;
                }
    
                stage(&apos;Build x86-64&apos;) {
                    sh &quot;make -j \$(nproc) GLUON_TARGET=x86-64 clean&quot;
                    sh &quot;make -j \$(nproc) GLUON_TARGET=x86-64&quot;
                }
    
                stage(&apos;Build x86-generic&apos;) {
                    sh &quot;make -j \$(nproc) GLUON_TARGET=x86-generic clean&quot;
                    sh &quot;make -j \$(nproc) GLUON_TARGET=x86-generic&quot;
                }
    
                stage(&apos;Build x86-kvm_guest&apos;) {
                    sh &quot;make -j \$(nproc) GLUON_TARGET=x86-kvm_guest clean&quot;
                    sh &quot;make -j \$(nproc) GLUON_TARGET=x86-kvm_guest&quot;
                }
    
                stage(&apos;Build x86-xen_domu&apos;) {
                    sh &quot;make -j \$(nproc) GLUON_TARGET=x86-xen_domu clean&quot;
                    sh &quot;make -j \$(nproc) GLUON_TARGET=x86-xen_domu&quot;
                }*/
    
                //stage(&apos;generate test data&apos;) {
                ws {
                    sh &quot;mkdir -p output; echo &apos;test&apos; &gt; output/thisIsMyArtefact&quot;
                    archiveArtifacts allowEmptyArchive: true, artifacts: &apos;*&apos;, caseSensitive: false, defaultExcludes: false, fingerprint: true, onlyIfSuccessful: true
                //}
                }
    
                //stage(&apos;Wrap artifacts up&apos;) {
                    // should be ~180MiB per target, maybe less when all files are in a single archive.
                    //archiveArtifacts artifacts: &apos;*&apos;
                    // archiveArtifacts artifacts: &apos;output&apos;
                    //, fingerprint: true, onlyIfSuccessful: true
                //}
    
                //stage(&apos;Cleanup&apos;) {
                    // step([$class: &apos;WsCleanup&apos;, cleanWhenFailure: false])
                //}
            //}
        //}
    //}
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
</flow-definition>