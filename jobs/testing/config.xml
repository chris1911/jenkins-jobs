<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.9">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.23">
    <script>node {
    env.ffsiterepo = &apos;https://github.com/chris1911/site-ffka&apos;   // switch to official repo asap
    env.ffsitebranch = &apos;gluon-2016.2.1&apos;                         // &apos;master&apos; or &apos;refs/tags/v0.2.90-stable.1&apos;
    env.gluonrepo = &apos;https://github.com/freifunk-gluon/gluon&apos;   // the correct branch/tag will be determined automatically
    
    wrap([$class: &apos;TimestamperBuildWrapper&apos;]) {
        timeout(time: 6, unit: &apos;HOURS&apos;) {
            ws {
                stage(&apos;Cleanup&apos;) {
                    deleteDir()
                }
                dir(&apos;site&apos;) {
                    stage(&apos;Checkout site.conf&apos;) {
                        // this is the only syntax able to check out tags
                        checkout([$class: &apos;GitSCM&apos;, userRemoteConfigs: [[url: env.ffsiterepo]], branches: [[name: env.ffsitebranch]]])
                    }

                    env.gluonBranch = sh([returnStdout: true, script: &apos;make -f jenkins.mk gluonbranch&apos;])
                    echo &apos;Corresponding gluon tag: &apos; + env.gluonbranch
                }
                
                dir(&apos;ffka&apos;) {
                    stage(&apos;Checkout gluon&apos;) {
                        def branchName = &apos;refs/tags/&apos; + env.gluonBranch
                        echo &apos;gluon: using git branch name=&apos; + branchName
                        checkout([$class: &apos;GitSCM&apos;, userRemoteConfigs: [[url: env.gluonrepo]], branches: [[name: branchName]]])
                        sh &quot;ln -s ../site ./site&quot;
                    }
                    
                    stage(&apos;Update gluon sub projects&apos;) {
                        sh &quot;make update&quot;
                    }
                    
                    stage(&apos;Prepare and build targets&apos;) {
                        def gluontargets = sh([returnStdout: true, script: &apos;make -f site/jenkins.mk targets&apos;])
                        String[] targets = gluontargets.trim().split(&apos; &apos;)
                        
                        for(int i = 0; i &lt; targets.size(); i++) {   // for-loop must stay, otherwise: java.io.NotSerializableException: java.util.AbstractList$Itr
                            
                            def stagename = &apos;Build &apos; + targets[i]
                            stage(stagename) {
                                env.GLUON_TARGET = targets[i]
                                sh &quot;make -j \$(nproc) clean&quot;    // rebuilds all (tool-)packages for a single target (and cleans up temporary files)
                                sh &quot;make -j \$(nproc)&quot;
                                sh &quot;make -j \$(nproc) clean&quot;    // clean again: reduce disk space consumption; build artifacts (=output folder) remain
                            }
                        }
                    }
                    
                    stage(&apos;Wrap artifacts up&apos;) {
                        // should be ~180MiB per target
                        archiveArtifacts artifacts: &apos;output/**&apos;, caseSensitive: false, defaultExcludes: false, onlyIfSuccessful: true
                    }
                    
                    stage(&apos;Cleanup&apos;) {
                         step([$class: &apos;WsCleanup&apos;, cleanWhenFailure: false])
                    }
                }
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
</flow-definition>